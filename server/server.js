// ===== IMPORTS =====

import express from "express";
import path from "path";
import { fileURLToPath } from "url";
import cors from "cors";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";
import multer from "multer";
import fs from "fs";
import { pool } from "./db.js";

// ===== C·∫§U H√åNH C∆† B·∫¢N =====

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

// X√°c ƒë·ªãnh __dirname cho ES module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ===== UPLOADS CONFIG =====

const UPLOAD_DIR = path.join(__dirname, "..", "uploads");

if (!fs.existsSync(UPLOAD_DIR)) {
  fs.mkdirSync(UPLOAD_DIR, { recursive: true });
}

// Serve upload folder
app.use("/uploads", express.static(UPLOAD_DIR));

// Multer config
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, UPLOAD_DIR),
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname).toLowerCase();
    const name = `${Date.now()}-${Math.random()
      .toString(36)
      .slice(2, 9)}${ext}`;
    cb(null, name);
  },
});

const upload = multer({
  storage,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB
  fileFilter: (req, file, cb) => {
    if (!file.mimetype.startsWith("image/")) {
      return cb(new Error("Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh"));
    }
    cb(null, true);
  },
});

// Middleware x·ª≠ l√Ω form-data
app.use((req, res, next) => {
  if (req.headers["content-type"]?.includes("multipart/form-data")) {
    upload.array("images")(req, res, (err) => {
      if (err) {
        return res.status(400).json({ error: err.message });
      } // Parse JSON data n·∫øu c√≥
      if (req.body?.data) {
        try {
          req.body = { ...req.body, ...JSON.parse(req.body.data) };
        } catch (e) {
          console.warn("L·ªói parse JSON data:", e);
        }
      }
      next();
    });
  } else {
    next();
  }
});

// ===== SERVE STATIC =====

// Serve frontend User (th∆∞ m·ª•c public)
app.use("/", express.static(path.join(__dirname, "../public")));

// Serve frontend Admin (th∆∞ m·ª•c admin/public)
app.use("/admin", express.static(path.join(__dirname, "../admin/public")));

// ===== ROUTES G·ªêC =====

// User home page
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "../public/home.html"));
});

// Admin home page
app.get("/admin", (req, res) => {
  res.sendFile(path.join(__dirname, "../admin/public/home.html"));
});

// ===== HEALTH CHECK =====
app.get("/health", async (req, res) => {
  try {
    const result = await pool.query("SELECT NOW()");
    res.json({ status: "ok", time: result.rows[0].now });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// ===== AUTH APIs =====
app.post("/auth/register", async (req, res) => {
  const { fullName, username, email, phone, password } = req.body;

  if (!fullName || !username || !email || !phone || !password) {
    return res.status(400).json({ error: "Thi·∫øu th√¥ng tin ƒëƒÉng k√Ω" });
  }

  try {
    // Hash m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);

    // Th·ª±c hi·ªán INSERT v√†o PostgreSQL
    await pool.query(
      `INSERT INTO users (username, email, password_hash, full_name, phone, role, is_active)
       VALUES ($1, $2, $3, $4, $5, 'customer', true)`,
      [username, email, hashedPassword, fullName, phone]
    );

    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng" });
  } catch (err) {
    console.error("L·ªói khi ƒëƒÉng k√Ω:", err);
    if (err.code === "23505") {
      res.status(400).json({ error: "Email ho·∫∑c Username ƒë√£ t·ªìn t·∫°i" });
    } else {
      res.status(500).json({ error: "L·ªói server khi ƒëƒÉng k√Ω" });
    }
  }
});


// ƒêƒÉng nh·∫≠p
app.post("/auth/login", async (req, res) => {
  const { email, password } = req.body;
  console.log("üì© Login request:", email);

  try {
    const { rows } = await pool.query(
      "SELECT id, email, username, password_hash, role, full_name FROM users WHERE email=$1 AND is_active=true",
      [email]
    );

    if (rows.length === 0) {
      return res.status(401).json({ error: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i ho·∫∑c b·ªã kh√≥a" });
    }

    const user = rows[0];

    // ‚úÖ So s√°nh m·∫≠t kh·∫©u th·ª±c s·ª± v·ªõi bcrypt
    const validPassword = await bcrypt.compare(password, user.password_hash);

    if (!validPassword) {
      return res.status(401).json({ error: "Sai m·∫≠t kh·∫©u" });
    }

    const token = jwt.sign(
      { userId: user.id, role: user.role },
      process.env.JWT_SECRET || "defaultsecret",
      { expiresIn: "8h" }
    );

    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      token,
      username: user.username,
      full_name: user.full_name,
      role: user.role,
    });
  } catch (err) {
    console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p chi ti·∫øt:", err);
    res.status(500).json({ error: "L·ªói server khi ƒëƒÉng nh·∫≠p" });
  }
});


// ===== HOTEL MANAGEMENT APIs =====
// Gi·ªØ nguy√™n c√°c API qu·∫£n l√Ω kh√°ch s·∫°n...

// ===== ROOM APIs =====

// API l·∫•y danh s√°ch ph√≤ng cho kh√°ch (ƒê√£ s·ª≠a sang single-line)
app.get("/api/rooms", async (req, res) => {
  try {
    const queryText =
      "SELECT r.id, r.room_number, r.room_type_id, rt.name AS room_type, rt.price_per_night, rt.capacity, rd.images_url as images, rd.description, rd.features FROM rooms r JOIN room_types rt ON r.room_type_id = rt.id LEFT JOIN room_details rd ON rd.room_id = r.id ORDER BY r.room_number";
    const result = await pool.query(queryText);
    res.json(result.rows);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ph√≤ng:", error);
    res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch ph√≤ng" });
  }
});

// API l·∫•y danh s√°ch lo·∫°i ph√≤ng (ƒê√£ s·ª≠a sang single-line)
app.get("/api/admin/room-types", async (req, res) => {
  try {
    const queryText =
      "SELECT id, name, price_per_night, capacity FROM room_types WHERE is_active = true ORDER BY price_per_night";
    const result = await pool.query(queryText);
    res.json(result.rows);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch lo·∫°i ph√≤ng:", error);
    res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch lo·∫°i ph√≤ng" });
  }
});

// API l·∫•y danh s√°ch ph√≤ng cho admin (ƒê√É S·ª¨A sang single-line)
app.get("/api/admin/rooms", async (req, res) => {
  try {
    const queryText =
      "SELECT r.id, r.room_number, r.room_type_id, rt.id AS room_type_id, rt.name AS room_type, rt.price_per_night, rd.description, rd.features, rd.images_url as images, r.status, r.category, r.location, r.address FROM rooms r JOIN room_types rt ON r.room_type_id = rt.id LEFT JOIN room_details rd ON rd.room_id = r.id ORDER BY r.created_at DESC";
    const result = await pool.query(queryText);
    res.json(result.rows);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ph√≤ng:", error);
    res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch ph√≤ng" });
  }
});

// API th√™m ph√≤ng m·ªõi (Gi·ªØ nguy√™n Template Literal nh∆∞ng ƒë√£ c√≥ .trim() ·ªü code tr∆∞·ªõc, n√™n v·∫´n n√™n gi·ªØ)
app.post("/api/admin/rooms", async (req, res) => {
  const client = await pool.connect();
  try {
    const {
      room_number,
      room_type_id,
      category,
      status,
      location,
      address,
      description,
      features,
    } = req.body;

    if (!room_type_id) {
      return res
        .status(400)
        .json({ error: "Thi·∫øu th√¥ng tin lo·∫°i ph√≤ng (room_type_id)" });
    }

    await client.query("BEGIN"); // Th√™m ph√≤ng m·ªõi
    const roomResult = await client.query(
      `INSERT INTO rooms (room_number, room_type_id, category, status, location, address)
¬† ¬† ¬† ¬†VALUES ($1, $2, $3, $4, $5, $6)
¬† ¬† ¬† ¬†RETURNING *
¬† ¬† ¬† `,
      [
        room_number || null,
        room_type_id,
        category || "standard",
        status || "available",
        location || "ha-noi",
        address || null,
      ]
    ); // X·ª≠ l√Ω ·∫£nh v√† chi ti·∫øt ph√≤ng
    const images = (req.files || []).map((f) => `/uploads/${f.filename}`); // Chuy·ªÉn features th√†nh m·∫£ng
    let featuresArray = features;
    if (features && !Array.isArray(features)) {
      try {
        featuresArray = JSON.parse(features);
      } catch (e) {
        featuresArray = [features];
      }
    } // Th√™m chi ti·∫øt ph√≤ng
    await client.query(
      `INSERT INTO room_details (room_id, description, features, images_url)
¬† ¬† ¬† ¬†VALUES ($1, $2, $3, $4)
¬† ¬† ¬† `,
      [roomResult.rows[0].id, description || null, featuresArray, images]
    );

    await client.query("COMMIT");

    res.status(201).json({
      ...roomResult.rows[0],
      images,
      description,
      features: featuresArray,
    });
  } catch (error) {
    await client.query("ROLLBACK");
    console.error("‚ùå L·ªói khi th√™m ph√≤ng:", error);
    res.status(500).json({ error: "L·ªói khi th√™m ph√≤ng: " + error.message });
  } finally {
    client.release();
  }
});

// API c·∫≠p nh·∫≠t ph√≤ng
app.put("/api/admin/rooms/:id", async (req, res) => {
  const client = await pool.connect();
  try {
    const { id } = req.params;
    const {
      room_number,
      room_type_id,
      category,
      status,
      location,
      address,
      description,
      features,
      existingImages,
    } = req.body;

    await client.query("BEGIN"); // X·ª≠ l√Ω ·∫£nh m·ªõi v√† c≈©
    const newImages = (req.files || []).map((f) => `/uploads/${f.filename}`);

    const keepImages = existingImages
      ? Array.isArray(existingImages)
        ? existingImages
        : JSON.parse(existingImages)
      : [];

    const finalImages = [...keepImages, ...newImages]; // Chuy·ªÉn features th√†nh m·∫£ng
    let featuresArray = features;
    if (features && !Array.isArray(features)) {
      try {
        featuresArray = JSON.parse(features);
      } catch (e) {
        featuresArray = [features];
      }
    } // C·∫≠p nh·∫≠t th√¥ng tin ph√≤ng
    const roomResult = await client.query(
      `UPDATE rooms
¬† ¬† ¬† ¬†SET room_number=$1, room_type_id=$2, category=$3, status=$4,
¬† ¬† ¬† ¬† ¬† ¬†location=$5, address=$6, updated_at=NOW()
¬† ¬† ¬† ¬†WHERE id=$7
¬† ¬† ¬† ¬†RETURNING *
¬† ¬† ¬† `,
      [
        room_number,
        room_type_id,
        category || "standard",
        status || "available",
        location || "ha-noi",
        address || null,
        id,
      ]
    );

    if (roomResult.rowCount === 0) {
      throw new Error("Kh√¥ng t√¨m th·∫•y ph√≤ng");
    } // C·∫≠p nh·∫≠t chi ti·∫øt ph√≤ng
    await client.query(
      `INSERT INTO room_details (room_id, description, features, images_url)
¬† ¬† ¬† ¬†VALUES ($1, $2, $3, $4)
¬† ¬† ¬† ¬†ON CONFLICT (room_id)
¬† ¬† ¬† ¬†DO UPDATE SET description=$2, features=$3, images_url=$4
¬† ¬† ¬† `,
      [id, description || null, featuresArray, finalImages]
    );

    await client.query("COMMIT");

    res.json({
      ...roomResult.rows[0],
      images: finalImages,
      description,
      features: featuresArray,
    });
  } catch (error) {
    await client.query("ROLLBACK");
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ph√≤ng:", error);
    res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t ph√≤ng: " + error.message });
  } finally {
    client.release();
  }
});

// API x√≥a ph√≤ng
app.delete("/api/admin/rooms/:id", async (req, res) => {
  const client = await pool.connect();
  try {
    const { id } = req.params;

    await client.query("BEGIN"); // L·∫•y danh s√°ch ·∫£nh ƒë·ªÉ x√≥a
    const detailsResult = await client.query(
      "SELECT images_url FROM room_details WHERE room_id=$1",
      [id]
    );

    const images = detailsResult.rows[0]?.images_url || []; // X√≥a d·ªØ li·ªáu t·ª´ database
    await client.query("DELETE FROM room_details WHERE room_id=$1", [id]);

    const result = await client.query("DELETE FROM rooms WHERE id=$1", [id]);

    if (result.rowCount === 0) {
      throw new Error("Kh√¥ng t√¨m th·∫•y ph√≤ng");
    }

    await client.query("COMMIT"); // X√≥a files ·∫£nh
    for (const url of images) {
      try {
        const filename = path.basename(url);
        const filepath = path.join(UPLOAD_DIR, filename);

        if (fs.existsSync(filepath)) {
          fs.unlinkSync(filepath);
        }
      } catch (e) {
        console.warn(`Kh√¥ng th·ªÉ x√≥a file: ${e.message}`);
      }
    }

    res.status(204).send();
  } catch (error) {
    await client.query("ROLLBACK");
    console.error("‚ùå L·ªói khi x√≥a ph√≤ng:", error);
    res.status(500).json({ error: "L·ªói khi x√≥a ph√≤ng: " + error.message });
  } finally {
    client.release();
  }
});

// ===== KH·ªûI ƒê·ªòNG SERVER =====

const PORT = process.env.PORT || 5500;

app.listen(PORT, () => {
  console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});